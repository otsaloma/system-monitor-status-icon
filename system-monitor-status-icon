#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2011-2013 Osmo Salomaa
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
A CPU, memory and disk usage monitor status icon.

Requires PyGObject and psutil.
"""

import math
import psutil
import subprocess
import sys

from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk


class Monitor(Gtk.StatusIcon):

    """A CPU, memory and disk usage monitor status icon."""

    def __init__(self):
        """Initialize, but don't yet start updating."""
        GObject.GObject.__init__(self)
        self.set_from_icon_name("system-monitor-status-icon-1111")
        self.connect("activate", self.on_activate)
        self.connect("popup-menu", self.on_popup_menu)
        self.disk_counters = psutil.disk_io_counters()
        self.disk_max = 1/1000000

    def clip(self, value, valuemin, valuemax):
        """Clip `value` to [`valuemin`, `valuemax`]."""
        return max(valuemin, min(valuemax, value))

    def get_cpu_usage(self):
        """Return per-CPU usage between [0,1]."""
        usage = psutil.cpu_percent(percpu=True)
        return [self.clip(x/100, 0, 1) for x in usage]

    def get_disk_usage(self):
        """Return disk usage between [0,1]."""
        count1 = self.disk_counters
        count2 = psutil.disk_io_counters()
        self.disk_counters = count2
        bytes1 = count1.read_bytes + count1.write_bytes
        bytes2 = count2.read_bytes + count2.write_bytes
        diff = (bytes2 - bytes1) / 1024**2
        self.disk_max = max(self.disk_max, diff)
        return self.clip(diff/self.disk_max, 0, 1)

    def get_memory_usage(self):
        """Return memory usage between [0,1]."""
        usage = psutil.virtual_memory().percent
        return self.clip(usage/100, 0, 1)

    def get_state(self, usage):
        """Return state [1,4] from usage fraction [0,1]."""
        return self.clip(int(math.ceil(usage*4)), 1, 4)

    def on_activate(self, icon):
        """Launch a system monitor application for details."""
        try:
            if sys.platform == "win32":
                subprocess.Popen("taskmgr")
            else:
                # TODO: Add KDE, XFCE etc. equivalents.
                subprocess.Popen("gnome-system-monitor")
        except Exception:
            pass

    def on_popup_menu(self, icon, button, time):
        """Display a menu to allow quitting."""
        menu = Gtk.Menu()
        item = Gtk.MenuItem(label="Quit")
        item.connect("activate", Gtk.main_quit)
        menu.append(item)
        menu.show_all()
        menu.popup(parent_menu_shell=None,
                   parent_menu_item=None,
                   func=self.position_menu,
                   data=self,
                   button=button,
                   activate_time=time)

    def update(self):
        """Poll the usage values and update icon."""
        cpu = self.get_cpu_usage()
        memory = self.get_memory_usage()
        disk = self.get_disk_usage()
        name = ("system-monitor-status-icon-{:d}{:d}{:d}{:d}"
                .format(self.get_state(min(cpu)),
                        self.get_state(max(cpu)),
                        self.get_state(memory),
                        self.get_state(disk)))

        self.set_from_icon_name(name)
        self.update_tooltip(cpu, memory, disk)
        while Gtk.events_pending():
            Gtk.main_iteration()
        return True # to be called again.

    def update_tooltip(self, cpu, memory, disk):
        """Update detailed information to tooltip."""
        # TODO: Use Gtk.Widget.set_tooltip_window
        # to get the labels and values to line up nicely.
        markup = ""
        for i in range(len(cpu)):
            markup += ("<b>CPU:</b> {:.0f}%\n"
                       .format(cpu[i]*100))

        markup += "<b>Mem:</b> {:.0f}%\n".format(memory*100)
        markup += "<b>Disk:</b> {:.0f}%\n".format(disk*100)
        markup = "<tt>{}</tt>".format(markup)
        # Use no-break spaces to avoid linebreaks,
        # which seem to act funky when using tt.
        markup = markup.replace(" ", "\u00a0")
        self.set_tooltip_markup(markup)


if __name__ == "__main__":
    monitor = Monitor()
    GLib.timeout_add_seconds(2, monitor.update)
    Gtk.main()
